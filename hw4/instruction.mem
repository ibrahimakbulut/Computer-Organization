//10 instructions with their definition.

//00001000111011110000011111000011
10001100111000010000000000001011
00001000000000000000000000011011
//shift right logical instruction rs=22.reg, rt=23.reg, rd=24.reg shamt=7
//10001100111000010000000000000001
//shift right logical instruction rs=22.reg, rt=23.reg, rd=24.reg shamt=7
00000010110101111100000011000010
//or instruction rs=16.reg, rt=17.reg, rd=18.reg, shamt=x
00000010000100011001000000100101
//add instruction rs=4.reg, rt=5.reg, rd=6.reg, shamt=x
00000000100001010011000000100000
//shift left logical instruction rs=1.reg ,rt=2.reg ,rd=3.reg  shamt=3
00000000001000100001100011000000
//and instruction rs=7.reg, rt=8.reg, rd=9.reg, shamt=x
00000000111010000100100000100100
//addu instrouction rs=10.reg, rt=11.reg, rd=12.reg, shamt=x
00000001010010110110000000100001
//nor instruction rs=13.reg, rt=14.reg, rd=15.reg, shamt=x
00000001101011100111100000100111
//sltu instruction rs=19.reg, rt=20.reg, rd=21.reg shamt=x
00000010011101001010100000101011
//sub instruction rs=25.reg, rt=26.reg, rd=27.reg shampt=x
00000011001110101101100000100010
//subu instruction rs=28.reg, rt=29.reg, rd=30.reg shamt=x
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011
00000011100111011111000000100011